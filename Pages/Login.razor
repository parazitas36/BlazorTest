@page "/login"
@using BlazorTest.Authentication
@using BlazorTest.Data
@using System.ComponentModel.DataAnnotations
@inject IUniversityDatabase universityDb
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager NavigationManager

<h3>Login</h3>

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
            @if (!String.IsNullOrEmpty(error))
            {
                <h6 style="color: tomato">@error</h6>
            }
        </div>
        <div class="mb-3">
            <label>Username</label>
            <input @bind="model.Username" class="form-control" placeholder="Username"/>
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input type="password" @bind="model.Password" class="form-control" placeholder="Password"/>
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>

</div>

@code {
    private class LoginModel
    {
        [MaxLength(50)]
        public string Username { get; set; }
        [MaxLength(50)]
        public string Password { get; set; }
    }
    private LoginModel model = new LoginModel();
    private string? error = null;

    private async Task Authenticate()
    {
        var userAccount = universityDb.GetByUsername(model.Username);
        if (userAccount == null || !userAccount.Password.Equals(model.Password))
        {
            error = "Account with the data you have provided was not found!";
            StateHasChanged();
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = userAccount.UserName,
                Role = userAccount.Role
            });

        NavigationManager.NavigateTo("/", true);
    }
}
